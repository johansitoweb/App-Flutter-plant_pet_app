// Generated by DDC, the Dart Development Compiler (to JavaScript).
// Version: 2.19.2 (stable) (Tue Feb 7 18:37:17 2023 +0000) on "linux_x64"
// Module: zapp_user_main
// Flags: soundNullSafety(true), enableAsserts(true)
define('zapp_user_main', ['dart_sdk', 'flutter_sdk'], (function load__zapp_user_main(dart_sdk, flutter_sdk) {
  'use strict';
  const core = dart_sdk.core;
  const async = dart_sdk.async;
  const _interceptors = dart_sdk._interceptors;
  const js = dart_sdk.js;
  const ui = dart_sdk.ui;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const app = flutter_sdk.src__material__app;
  const theme_data = flutter_sdk.src__material__theme_data;
  const colors = flutter_sdk.src__material__colors;
  const framework = flutter_sdk.src__widgets__framework;
  const basic = flutter_sdk.src__widgets__basic;
  const text = flutter_sdk.src__widgets__text;
  const scaffold = flutter_sdk.src__material__scaffold;
  const app_bar = flutter_sdk.src__material__app_bar;
  const bottom_navigation_bar = flutter_sdk.src__material__bottom_navigation_bar;
  const bottom_navigation_bar_item = flutter_sdk.src__widgets__bottom_navigation_bar_item;
  const icon = flutter_sdk.src__widgets__icon;
  const icon_data = flutter_sdk.src__widgets__icon_data;
  const scroll_view = flutter_sdk.src__widgets__scroll_view;
  const list_tile = flutter_sdk.src__material__list_tile;
  const circle_avatar = flutter_sdk.src__material__circle_avatar;
  const _network_image_web = flutter_sdk.src__painting___network_image_web;
  const navigator = flutter_sdk.src__widgets__navigator;
  const page = flutter_sdk.src__material__page;
  const icon_button = flutter_sdk.src__material__icon_button;
  const icons = flutter_sdk.src__material__icons;
  const binding = flutter_sdk.src__widgets__binding;
  var $46zapp_entry = Object.create(dart.library);
  var main = Object.create(dart.library);
  var web_plugin_registrant = Object.create(dart.library);
  var $toString = dartx.toString;
  var $add = dartx.add;
  var $remove = dartx.remove;
  var $_get = dartx._get;
  var $length = dartx.length;
  var $contains = dartx.contains;
  dart._checkModuleNullSafetyMode(true);
  dart._checkModuleRuntimeTypes(false);
  var T = {
    VoidTovoid: () => (T.VoidTovoid = dart.constFn(dart.fnType(dart.void, [])))(),
    ListOfString: () => (T.ListOfString = dart.constFn(core.List$(core.String)))(),
    ListOfStringTodynamic: () => (T.ListOfStringTodynamic = dart.constFn(dart.fnType(dart.dynamic, [T.ListOfString()])))(),
    JSArrayOfString: () => (T.JSArrayOfString = dart.constFn(_interceptors.JSArray$(core.String)))(),
    dynamicToNull: () => (T.dynamicToNull = dart.constFn(dart.fnType(core.Null, [dart.dynamic])))(),
    VoidToNull: () => (T.VoidToNull = dart.constFn(dart.fnType(core.Null, [])))(),
    ObjectAndStackTraceTovoid: () => (T.ObjectAndStackTraceTovoid = dart.constFn(dart.fnType(dart.void, [core.Object, core.StackTrace])))(),
    ZoneAndZoneDelegateAndZone__Tovoid: () => (T.ZoneAndZoneDelegateAndZone__Tovoid = dart.constFn(dart.fnType(dart.void, [async.Zone, async.ZoneDelegate, async.Zone, core.String])))(),
    StringAndboolToNull: () => (T.StringAndboolToNull = dart.constFn(dart.fnType(core.Null, [core.String, core.bool])))(),
    JSArrayOfWidget: () => (T.JSArrayOfWidget = dart.constFn(_interceptors.JSArray$(framework.Widget)))(),
    boolToNull: () => (T.boolToNull = dart.constFn(dart.fnType(core.Null, [core.bool])))(),
    BuildContextToPlantDetailScreen: () => (T.BuildContextToPlantDetailScreen = dart.constFn(dart.fnType(main.PlantDetailScreen, [framework.BuildContext])))(),
    BuildContextAndintToListTile: () => (T.BuildContextAndintToListTile = dart.constFn(dart.fnType(list_tile.ListTile, [framework.BuildContext, core.int])))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.fn(main.main, T.VoidTovoid());
    },
    get C4() {
      return C[4] = dart.const({
        __proto__: icon_data.IconData.prototype,
        [IconData_matchTextDirection]: false,
        [IconData_fontPackage]: null,
        [IconData_fontFamily]: "MaterialIcons",
        [IconData_codePoint]: 58136
      });
    },
    get C3() {
      return C[3] = dart.const({
        __proto__: icon.Icon.prototype,
        [Widget_key]: null,
        [Icon_textDirection]: null,
        [Icon_semanticLabel]: null,
        [Icon_shadows]: null,
        [Icon_color]: null,
        [Icon_opticalSize]: null,
        [Icon_grade]: null,
        [Icon_weight]: null,
        [Icon_fill]: null,
        [Icon_size]: null,
        [Icon_icon]: C[4] || CT.C4
      });
    },
    get C2() {
      return C[2] = dart.const({
        __proto__: bottom_navigation_bar_item.BottomNavigationBarItem.prototype,
        [BottomNavigationBarItem_tooltip]: null,
        [BottomNavigationBarItem_backgroundColor]: null,
        [BottomNavigationBarItem_label]: "Home",
        [BottomNavigationBarItem_activeIcon]: C[3] || CT.C3,
        [BottomNavigationBarItem_icon]: C[3] || CT.C3
      });
    },
    get C7() {
      return C[7] = dart.const({
        __proto__: icon_data.IconData.prototype,
        [IconData_matchTextDirection]: false,
        [IconData_fontPackage]: null,
        [IconData_fontFamily]: "MaterialIcons",
        [IconData_codePoint]: 57947
      });
    },
    get C6() {
      return C[6] = dart.const({
        __proto__: icon.Icon.prototype,
        [Widget_key]: null,
        [Icon_textDirection]: null,
        [Icon_semanticLabel]: null,
        [Icon_shadows]: null,
        [Icon_color]: null,
        [Icon_opticalSize]: null,
        [Icon_grade]: null,
        [Icon_weight]: null,
        [Icon_fill]: null,
        [Icon_size]: null,
        [Icon_icon]: C[7] || CT.C7
      });
    },
    get C5() {
      return C[5] = dart.const({
        __proto__: bottom_navigation_bar_item.BottomNavigationBarItem.prototype,
        [BottomNavigationBarItem_tooltip]: null,
        [BottomNavigationBarItem_backgroundColor]: null,
        [BottomNavigationBarItem_label]: "Favorites",
        [BottomNavigationBarItem_activeIcon]: C[6] || CT.C6,
        [BottomNavigationBarItem_icon]: C[6] || CT.C6
      });
    },
    get C10() {
      return C[10] = dart.const({
        __proto__: icon_data.IconData.prototype,
        [IconData_matchTextDirection]: false,
        [IconData_fontPackage]: null,
        [IconData_fontFamily]: "MaterialIcons",
        [IconData_codePoint]: 58751
      });
    },
    get C9() {
      return C[9] = dart.const({
        __proto__: icon.Icon.prototype,
        [Widget_key]: null,
        [Icon_textDirection]: null,
        [Icon_semanticLabel]: null,
        [Icon_shadows]: null,
        [Icon_color]: null,
        [Icon_opticalSize]: null,
        [Icon_grade]: null,
        [Icon_weight]: null,
        [Icon_fill]: null,
        [Icon_size]: null,
        [Icon_icon]: C[10] || CT.C10
      });
    },
    get C8() {
      return C[8] = dart.const({
        __proto__: bottom_navigation_bar_item.BottomNavigationBarItem.prototype,
        [BottomNavigationBarItem_tooltip]: null,
        [BottomNavigationBarItem_backgroundColor]: null,
        [BottomNavigationBarItem_label]: "Settings",
        [BottomNavigationBarItem_activeIcon]: C[9] || CT.C9,
        [BottomNavigationBarItem_icon]: C[9] || CT.C9
      });
    },
    get C1() {
      return C[1] = dart.constList([C[2] || CT.C2, C[5] || CT.C5, C[8] || CT.C8], bottom_navigation_bar_item.BottomNavigationBarItem);
    }
  }, false);
  var C = Array(11).fill(void 0);
  var I = ["file:///zapp/project/lib/main.dart"];
  $46zapp_entry.runAppGuarded = function runAppGuarded() {
    async.runZonedGuarded(core.Null, dart.fn(() => {
      if (T.ListOfStringTodynamic().is(C[0] || CT.C0)) {
        T.ListOfStringTodynamic().as(C[0] || CT.C0)(T.JSArrayOfString().of([]));
      } else {
        (C[0] || CT.C0)();
      }
      if (js.context.hasProperty("__notifyFlutterRendered")) {
        async.Future.delayed(new core.Duration.new({milliseconds: 250})).then(core.Null, dart.fn(_ => {
          js.context.callMethod("__notifyFlutterRendered", [false]);
        }, T.dynamicToNull()));
      }
    }, T.VoidToNull()), dart.fn((e, stackTrace) => {
      if (js.context.hasProperty("zappHandlerUserError")) {
        js.context.callMethod("zappHandlerUserError", [e[$toString](), stackTrace.toString()]);
      }
    }, T.ObjectAndStackTraceTovoid()), {zoneSpecification: new async._ZoneSpecification.new({print: dart.fn((self, parent, zone, line) => {
          if (js.context.hasProperty("zappHandlerUserPrint")) {
            js.context.callMethod("zappHandlerUserPrint", [line]);
          }
        }, T.ZoneAndZoneDelegateAndZone__Tovoid())})});
  };
  $46zapp_entry.main = function main$() {
    return async.async(dart.void, function* main() {
      yield ui.webOnlyWarmupEngine({runApp: dart.fn(() => {
          $46zapp_entry.runAppGuarded();
        }, T.VoidToNull()), registerPlugins: dart.fn(() => {
          web_plugin_registrant.registerPlugins();
        }, T.VoidToNull())});
    });
  };
  main.MyApp = class MyApp extends framework.StatelessWidget {
    build(context) {
      return new app.MaterialApp.new({title: "Plant & Pet App", theme: theme_data.ThemeData.new({primarySwatch: colors.Colors.green}), home: new main.HomeScreen.new()});
    }
    static ['_#new#tearOff']() {
      return new main.MyApp.new();
    }
  };
  (main.MyApp.new = function() {
    main.MyApp.__proto__.new.call(this);
    ;
  }).prototype = main.MyApp.prototype;
  dart.addTypeTests(main.MyApp);
  dart.addTypeCaches(main.MyApp);
  dart.setMethodSignature(main.MyApp, () => ({
    __proto__: dart.getMethods(main.MyApp.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(main.MyApp, I[0]);
  main.HomeScreen = class HomeScreen extends framework.StatefulWidget {
    createState() {
      return new main._HomeScreenState.new();
    }
    static ['_#new#tearOff']() {
      return new main.HomeScreen.new();
    }
  };
  (main.HomeScreen.new = function() {
    main.HomeScreen.__proto__.new.call(this);
    ;
  }).prototype = main.HomeScreen.prototype;
  dart.addTypeTests(main.HomeScreen);
  dart.addTypeCaches(main.HomeScreen);
  dart.setMethodSignature(main.HomeScreen, () => ({
    __proto__: dart.getMethods(main.HomeScreen.__proto__),
    createState: dart.fnType(main._HomeScreenState, [])
  }));
  dart.setLibraryUri(main.HomeScreen, I[0]);
  var _selectedIndex = dart.privateName(main, "_selectedIndex");
  var _favoritePlants = dart.privateName(main, "_favoritePlants");
  var _onItemTapped = dart.privateName(main, "_onItemTapped");
  var BottomNavigationBarItem_tooltip = dart.privateName(bottom_navigation_bar_item, "BottomNavigationBarItem.tooltip");
  var BottomNavigationBarItem_backgroundColor = dart.privateName(bottom_navigation_bar_item, "BottomNavigationBarItem.backgroundColor");
  var BottomNavigationBarItem_label = dart.privateName(bottom_navigation_bar_item, "BottomNavigationBarItem.label");
  var Widget_key = dart.privateName(framework, "Widget.key");
  var Icon_textDirection = dart.privateName(icon, "Icon.textDirection");
  var Icon_semanticLabel = dart.privateName(icon, "Icon.semanticLabel");
  var Icon_shadows = dart.privateName(icon, "Icon.shadows");
  var Icon_color = dart.privateName(icon, "Icon.color");
  var Icon_opticalSize = dart.privateName(icon, "Icon.opticalSize");
  var Icon_grade = dart.privateName(icon, "Icon.grade");
  var Icon_weight = dart.privateName(icon, "Icon.weight");
  var Icon_fill = dart.privateName(icon, "Icon.fill");
  var Icon_size = dart.privateName(icon, "Icon.size");
  var IconData_matchTextDirection = dart.privateName(icon_data, "IconData.matchTextDirection");
  var IconData_fontPackage = dart.privateName(icon_data, "IconData.fontPackage");
  var IconData_fontFamily = dart.privateName(icon_data, "IconData.fontFamily");
  var IconData_codePoint = dart.privateName(icon_data, "IconData.codePoint");
  var Icon_icon = dart.privateName(icon, "Icon.icon");
  var BottomNavigationBarItem_activeIcon = dart.privateName(bottom_navigation_bar_item, "BottomNavigationBarItem.activeIcon");
  var BottomNavigationBarItem_icon = dart.privateName(bottom_navigation_bar_item, "BottomNavigationBarItem.icon");
  main._HomeScreenState = class _HomeScreenState extends framework.State$(main.HomeScreen) {
    [_onItemTapped](index) {
      this.setState(dart.fn(() => {
        this[_selectedIndex] = index;
      }, T.VoidTovoid()));
    }
    build(context) {
      let _pages = T.JSArrayOfWidget().of([new main.PlantList.new({plants: main._HomeScreenState.plants, favoritePlants: this[_favoritePlants], onFavoriteChanged: dart.fn((plant, isFavorite) => {
            this.setState(dart.fn(() => {
              if (isFavorite) {
                this[_favoritePlants][$add](plant);
              } else {
                this[_favoritePlants][$remove](plant);
              }
            }, T.VoidTovoid()));
          }, T.StringAndboolToNull())}), new main.FavoriteList.new({favoritePlants: this[_favoritePlants]}), new basic.Center.new({child: new text.Text.new("Settings")})]);
      return new scaffold.Scaffold.new({appBar: new app_bar.AppBar.new({title: new text.Text.new("Plantas")}), body: _pages[$_get](this[_selectedIndex]), bottomNavigationBar: new bottom_navigation_bar.BottomNavigationBar.new({items: C[1] || CT.C1, currentIndex: this[_selectedIndex], onTap: dart.bind(this, _onItemTapped)})});
    }
    static ['_#new#tearOff']() {
      return new main._HomeScreenState.new();
    }
  };
  (main._HomeScreenState.new = function() {
    this[_selectedIndex] = 0;
    this[_favoritePlants] = T.JSArrayOfString().of([]);
    main._HomeScreenState.__proto__.new.call(this);
    ;
  }).prototype = main._HomeScreenState.prototype;
  dart.addTypeTests(main._HomeScreenState);
  dart.addTypeCaches(main._HomeScreenState);
  dart.setMethodSignature(main._HomeScreenState, () => ({
    __proto__: dart.getMethods(main._HomeScreenState.__proto__),
    [_onItemTapped]: dart.fnType(dart.void, [core.int]),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(main._HomeScreenState, I[0]);
  dart.setFieldSignature(main._HomeScreenState, () => ({
    __proto__: dart.getFields(main._HomeScreenState.__proto__),
    [_selectedIndex]: dart.fieldType(core.int),
    [_favoritePlants]: dart.fieldType(core.List$(core.String))
  }));
  dart.setStaticFieldSignature(main._HomeScreenState, () => ['plants']);
  dart.defineLazy(main._HomeScreenState, {
    /*main._HomeScreenState.plants*/get plants() {
      return T.JSArrayOfString().of(["Plant 1", "Plant 2", "Plant 3", "Plant 4", "Plant 5", "Plant 6"]);
    },
    set plants(value) {}
  }, false);
  var plants$ = dart.privateName(main, "PlantList.plants");
  var favoritePlants$ = dart.privateName(main, "PlantList.favoritePlants");
  var onFavoriteChanged$ = dart.privateName(main, "PlantList.onFavoriteChanged");
  main.PlantList = class PlantList extends framework.StatelessWidget {
    get plants() {
      return this[plants$];
    }
    set plants(value) {
      super.plants = value;
    }
    get favoritePlants() {
      return this[favoritePlants$];
    }
    set favoritePlants(value) {
      super.favoritePlants = value;
    }
    get onFavoriteChanged() {
      return this[onFavoriteChanged$];
    }
    set onFavoriteChanged(value) {
      super.onFavoriteChanged = value;
    }
    static ['_#new#tearOff'](opts) {
      let plants = opts && 'plants' in opts ? opts.plants : null;
      let favoritePlants = opts && 'favoritePlants' in opts ? opts.favoritePlants : null;
      let onFavoriteChanged = opts && 'onFavoriteChanged' in opts ? opts.onFavoriteChanged : null;
      return new main.PlantList.new({plants: plants, favoritePlants: favoritePlants, onFavoriteChanged: onFavoriteChanged});
    }
    build(context) {
      return new scroll_view.ListView.builder({itemCount: this.plants[$length], itemBuilder: dart.fn((context, index) => {
          let plant = this.plants[$_get](index);
          let isFavorite = this.favoritePlants[$contains](plant);
          return new list_tile.ListTile.new({leading: new circle_avatar.CircleAvatar.new({backgroundImage: new _network_image_web.NetworkImage.new("https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcS8x_YGTU5CUvrc2tim6MUhy5lgO2Pg7ABw5XlBqq74pB8I5-86eVlm67K4ytp_Ye10kbYUORXpLTCtOXi9-c64Ow"), radius: 20}), title: new text.Text.new(plant), trailing: new main.FavoriteButton.new({isFavorite: isFavorite, onFavoriteChanged: dart.fn(isFavorite => {
                let t1, t0;
                t0 = plant;
                t1 = isFavorite;
                this.onFavoriteChanged(t0, t1);
              }, T.boolToNull())}), onTap: dart.fn(() => {
              navigator.Navigator.push(dart.dynamic, context, new page.MaterialPageRoute.new({builder: dart.fn(context => new main.PlantDetailScreen.new({plantName: plant}), T.BuildContextToPlantDetailScreen())}));
            }, T.VoidTovoid())});
        }, T.BuildContextAndintToListTile())});
    }
  };
  (main.PlantList.new = function(opts) {
    let plants = opts && 'plants' in opts ? opts.plants : null;
    let favoritePlants = opts && 'favoritePlants' in opts ? opts.favoritePlants : null;
    let onFavoriteChanged = opts && 'onFavoriteChanged' in opts ? opts.onFavoriteChanged : null;
    this[plants$] = plants;
    this[favoritePlants$] = favoritePlants;
    this[onFavoriteChanged$] = onFavoriteChanged;
    main.PlantList.__proto__.new.call(this);
    ;
  }).prototype = main.PlantList.prototype;
  dart.addTypeTests(main.PlantList);
  dart.addTypeCaches(main.PlantList);
  dart.setMethodSignature(main.PlantList, () => ({
    __proto__: dart.getMethods(main.PlantList.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(main.PlantList, I[0]);
  dart.setFieldSignature(main.PlantList, () => ({
    __proto__: dart.getFields(main.PlantList.__proto__),
    plants: dart.finalFieldType(core.List$(core.String)),
    favoritePlants: dart.finalFieldType(core.List$(core.String)),
    onFavoriteChanged: dart.finalFieldType(dart.fnType(dart.dynamic, [core.String, core.bool]))
  }));
  var isFavorite$ = dart.privateName(main, "FavoriteButton.isFavorite");
  var onFavoriteChanged$0 = dart.privateName(main, "FavoriteButton.onFavoriteChanged");
  main.FavoriteButton = class FavoriteButton extends framework.StatelessWidget {
    get isFavorite() {
      return this[isFavorite$];
    }
    set isFavorite(value) {
      super.isFavorite = value;
    }
    get onFavoriteChanged() {
      return this[onFavoriteChanged$0];
    }
    set onFavoriteChanged(value) {
      super.onFavoriteChanged = value;
    }
    static ['_#new#tearOff'](opts) {
      let isFavorite = opts && 'isFavorite' in opts ? opts.isFavorite : null;
      let onFavoriteChanged = opts && 'onFavoriteChanged' in opts ? opts.onFavoriteChanged : null;
      return new main.FavoriteButton.new({isFavorite: isFavorite, onFavoriteChanged: onFavoriteChanged});
    }
    build(context) {
      return new icon_button.IconButton.new({icon: new icon.Icon.new(this.isFavorite ? icons.Icons.favorite : icons.Icons.favorite_border, {color: this.isFavorite ? colors.Colors.red : null}), onPressed: dart.fn(() => {
          let t0;
          t0 = !this.isFavorite;
          this.onFavoriteChanged(t0);
        }, T.VoidTovoid())});
    }
  };
  (main.FavoriteButton.new = function(opts) {
    let isFavorite = opts && 'isFavorite' in opts ? opts.isFavorite : null;
    let onFavoriteChanged = opts && 'onFavoriteChanged' in opts ? opts.onFavoriteChanged : null;
    this[isFavorite$] = isFavorite;
    this[onFavoriteChanged$0] = onFavoriteChanged;
    main.FavoriteButton.__proto__.new.call(this);
    ;
  }).prototype = main.FavoriteButton.prototype;
  dart.addTypeTests(main.FavoriteButton);
  dart.addTypeCaches(main.FavoriteButton);
  dart.setMethodSignature(main.FavoriteButton, () => ({
    __proto__: dart.getMethods(main.FavoriteButton.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(main.FavoriteButton, I[0]);
  dart.setFieldSignature(main.FavoriteButton, () => ({
    __proto__: dart.getFields(main.FavoriteButton.__proto__),
    isFavorite: dart.finalFieldType(core.bool),
    onFavoriteChanged: dart.finalFieldType(dart.fnType(dart.dynamic, [core.bool]))
  }));
  var favoritePlants$0 = dart.privateName(main, "FavoriteList.favoritePlants");
  main.FavoriteList = class FavoriteList extends framework.StatelessWidget {
    get favoritePlants() {
      return this[favoritePlants$0];
    }
    set favoritePlants(value) {
      super.favoritePlants = value;
    }
    static ['_#new#tearOff'](opts) {
      let favoritePlants = opts && 'favoritePlants' in opts ? opts.favoritePlants : null;
      return new main.FavoriteList.new({favoritePlants: favoritePlants});
    }
    build(context) {
      return new scroll_view.ListView.builder({itemCount: this.favoritePlants[$length], itemBuilder: dart.fn((context, index) => {
          let plant = this.favoritePlants[$_get](index);
          return new list_tile.ListTile.new({title: new text.Text.new(plant), onTap: dart.fn(() => {
              navigator.Navigator.push(dart.dynamic, context, new page.MaterialPageRoute.new({builder: dart.fn(context => new main.PlantDetailScreen.new({plantName: plant}), T.BuildContextToPlantDetailScreen())}));
            }, T.VoidTovoid())});
        }, T.BuildContextAndintToListTile())});
    }
  };
  (main.FavoriteList.new = function(opts) {
    let favoritePlants = opts && 'favoritePlants' in opts ? opts.favoritePlants : null;
    this[favoritePlants$0] = favoritePlants;
    main.FavoriteList.__proto__.new.call(this);
    ;
  }).prototype = main.FavoriteList.prototype;
  dart.addTypeTests(main.FavoriteList);
  dart.addTypeCaches(main.FavoriteList);
  dart.setMethodSignature(main.FavoriteList, () => ({
    __proto__: dart.getMethods(main.FavoriteList.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(main.FavoriteList, I[0]);
  dart.setFieldSignature(main.FavoriteList, () => ({
    __proto__: dart.getFields(main.FavoriteList.__proto__),
    favoritePlants: dart.finalFieldType(core.List$(core.String))
  }));
  var plantName$ = dart.privateName(main, "PlantDetailScreen.plantName");
  main.PlantDetailScreen = class PlantDetailScreen extends framework.StatelessWidget {
    get plantName() {
      return this[plantName$];
    }
    set plantName(value) {
      super.plantName = value;
    }
    static ['_#new#tearOff'](opts) {
      let plantName = opts && 'plantName' in opts ? opts.plantName : null;
      return new main.PlantDetailScreen.new({plantName: plantName});
    }
    build(context) {
      return new scaffold.Scaffold.new({appBar: new app_bar.AppBar.new({title: new text.Text.new(this.plantName)}), body: new basic.Center.new({child: new text.Text.new("Información sobre " + this.plantName)})});
    }
  };
  (main.PlantDetailScreen.new = function(opts) {
    let plantName = opts && 'plantName' in opts ? opts.plantName : null;
    this[plantName$] = plantName;
    main.PlantDetailScreen.__proto__.new.call(this);
    ;
  }).prototype = main.PlantDetailScreen.prototype;
  dart.addTypeTests(main.PlantDetailScreen);
  dart.addTypeCaches(main.PlantDetailScreen);
  dart.setMethodSignature(main.PlantDetailScreen, () => ({
    __proto__: dart.getMethods(main.PlantDetailScreen.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(main.PlantDetailScreen, I[0]);
  dart.setFieldSignature(main.PlantDetailScreen, () => ({
    __proto__: dart.getFields(main.PlantDetailScreen.__proto__),
    plantName: dart.finalFieldType(core.String)
  }));
  main.main = function main$0() {
    binding.runApp(new main.MyApp.new());
  };
  web_plugin_registrant.registerPlugins = function registerPlugins() {
  };
  dart.trackLibraries("zapp_user_main", {
    "file:///zapp/project/.zapp_entry.dart": $46zapp_entry,
    "file:///zapp/project/lib/main.dart": main,
    "file:///zapp/project/.dart_tool/dartpad/web_plugin_registrant.dart": web_plugin_registrant
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["/zapp/project/.zapp_entry.dart","/zapp/project/lib/main.dart","/zapp/project/.dart_tool/dartpad/web_plugin_registrant.dart"],"names":[],"mappings":"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","file":"main.js"}');
  // Exports:
  return {
    zapp__project__$46zapp_entry: $46zapp_entry,
    zapp__project__lib__main: main,
    zapp__project__$46dart_tool__dartpad__web_plugin_registrant: web_plugin_registrant
  };
}));

//# sourceMappingURL=main.js.map
